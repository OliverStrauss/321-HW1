/ assignment1.legv8asm
/ Oliver Strauss (ols756@iastate.edu)
/ CS321 Fall 2025 - Programming Assignment 1
/ Stoopid Sort implementation

B main

//--------------------------------------------------
// MAIN
//--------------------------------------------------
main:
    SUBI SP, SP, #192            // reserve stack frame
    STUR X30, [SP, #0]
    STUR X19, [SP, #8]
    STUR X20, [SP, #16]

    // Set array base & size
    ADD X19, SP, XZR             // X19 = SP
    ADDI X19, X19, #32           // X19 = &array_region
    ADDI X20, XZR, #10           // X20 = size = 10

    //----------------------------------------
    // Fill array (descending values)
    //----------------------------------------
    ADD X0, X19, XZR             // X0 = array base
    ADD X1, X20, XZR             // X1 = n
    BL fill

    //----------------------------------------
    // Print array before swap
    //----------------------------------------
    ADD X0, X19, XZR             // X0 = array base
    ADD X1, X20, XZR             // X1 = n
    ADDI X2, XZR, #0             // X2 = i = 0
    BL print_loop

    //----------------------------------------
    // Swap a[0] and a[1]
    //----------------------------------------
   // ADDI X0, X19, #0             // array base
   // ADDI X1, XZR, #0             // i = 0
   // ADDI X2, XZR, #1             // j = 1
   // BL swap

    //Print array again
    //----------------------------------------
   // ADD X0, X19, XZR
   // ADD X1, X20, XZR
   // ADDI X2, XZR, #0
   // BL print_loop



    ADD X0, X19, XZR
    ADD X1, X20, XZR
   
    BL is_sorted
    PRNT X0





    //----------------------------------------
    // Restore and HALT
    //----------------------------------------
    LDUR X30, [SP, #0]
    LDUR X19, [SP, #8]
    LDUR X20, [SP, #16]
    ADDI SP, SP, #192
    HALT


//--------------------------------------------------
// PRINT_LOOP
// Expects: X0 = base, X1 = n, X2 = i (start index)
//--------------------------------------------------
print_loop:
    SUBI SP, SP, #32
    STUR X30, [SP, #0]
    STUR X3,  [SP, #8]
    STUR X4,  [SP, #16]

pl_loop:
    SUBS XZR, X2, X1          // while (i < n)
    B.GE pl_done

    LSL X3, X2, #3            // offset = i * 8
    ADD X3, X0, X3            // address = base + offset
    LDUR X4, [X3, #0]         // load a[i]
    PRNT X4

    ADDI X2, X2, #1           // i++
    B pl_loop

pl_done:
    LDUR X30, [SP, #0]
    LDUR X3,  [SP, #8]
    LDUR X4,  [SP, #16]
    ADDI SP, SP, #32
    BR LR





//--------------------------------------------------
// IS_SORTED
// Expects: X0 = base Adress , X1 = n
//---
is_sorted:
    SUBI SP, SP, #32
    STUR X30, [SP, #0]
    STUR X3,  [SP, #8]
    STUR X4,  [SP, #16]

   
    ADDI X21 , XZR , #0 // temp =0

    ADDI X2, XZR, #1          // i = 1


sorted_loop:
    SUBS XZR, X2, X1          // while (i < n)
    B.GE done



    LSL X3, X2, #3            // offset = i * 8
    ADD X3, X0, X3            // address = base + offset
    LDUR X4, [X3, #0]         // load a[i]


    SUBI X5, X2, #1      // X3 = i - 1
    LSL  X5, X5, #3      // X3 = (i - 1) * 8   (shift left by 3 bits)
    ADD  X5, X0, X5      // X3 = address of A[i - 1]
    LDUR X6, [X5, #0]    // X2 = A[i - 1]

    SUBS XZR, X4, X6
    B.LE not_sorted

    ADDI X2, X2, #1           // i++
    B sorted_loop


not_sorted:
    ADDI X0, XZR, #1          // return 1 (not sorted)
    B exit

done:
    ADDI X0, XZR, #0 

exit:
    LDUR X30, [SP, #0]
    LDUR X3,  [SP, #8]
    LDUR X4,  [SP, #16]
    LDUR X5,  [SP, #24]
    ADDI SP, SP, #32
    BR LR








//--------------------------------------------------
// SWAP
// Expects: X0 = base, X1 = i, X2 = j
//--------------------------------------------------
swap:
    SUBI SP, SP, #32
    STUR X30, [SP, #0]
    STUR X9,  [SP, #8]
    STUR X10, [SP, #16]

    LSL X9, X1, #3             // &a[i]
    ADD X9, X0, X9
    LDUR X10, [X9, #0]         // X10 = a[i]

    LSL X11, X2, #3            // &a[j]
    ADD X11, X0, X11
    LDUR X12, [X11, #0]        // X12 = a[j]

    STUR X12, [X9, #0]         // a[i] = a[j]
    STUR X10, [X11, #0]        // a[j] = old a[i]

    LDUR X30, [SP, #0]
    LDUR X9,  [SP, #8]
    LDUR X10, [SP, #16]
    ADDI SP, SP, #32
    BR LR


//--------------------------------------------------
// FILL
// Expects: X0 = base, X1 = n
// Fills array in descending order
//--------------------------------------------------
fill:
    SUBI SP, SP, #64
    STUR X30, [SP, #0]
    STUR X19, [SP, #8]
    STUR X20, [SP, #16]
    STUR X21, [SP, #24]
    STUR X22, [SP, #32]
    STUR X23, [SP, #40]

    ADD X19, X0, XZR           // base
    ADD X20, X1, XZR           // n
    //SUBI X21, XZR, #0  
    SUBI X21, X20, #1          // i = n - 1

fill_loop:
    //SUBS XZR, X21, X20
   //B.GE fill_done             // while (i < n)

   // LSL X23, X21, #3           // offset = i * 8
   // ADD X23, X19, X23          // address = base + offset
   // STUR X21, [X23, #0]        // a[i] = i

    //ADDI X21, X21, #1          // i++
   // B fill_loop


    SUBS XZR, X21, XZR
    B.LT fill_done             // while (i >= 0)

   SUB X22, X20, X21          // X22 = n - i
   SUBI X22, X22, #1          // X22 = n - i - 1
   LSL X23, X22, #3           // offset
    ADD X23, X19, X23          // &a[n - i - 1]

   STUR X21, [X23, #0]        // a[n - i - 1] = i

   SUBI X21, X21, #1
   B fill_loop

fill_done:
    LDUR X30, [SP, #0]
    LDUR X19, [SP, #8]
    LDUR X20, [SP, #16]
    LDUR X21, [SP, #24]
    LDUR X22, [SP, #32]
    LDUR X23, [SP, #40]
    ADDI SP, SP, #64
    BR LR


//--------------------------------------------------
// MAX_INDEX
// Expects: X0 = base, X1 = i, X2 = j
// Returns: X0 = index of larger element
//--------------------------------------------------
max_index:
    SUBI SP, SP, #32
    STUR X30, [SP, #0]
    STUR X9,  [SP, #8]
    STUR X10, [SP, #16]

    LSL X9, X1, #3
    ADD X9, X0, X9
    LDUR X9, [X9, #0]

    LSL X10, X2, #3
    ADD X10, X0, X10
    LDUR X10, [X10, #0]

    SUBS XZR, X9, X10
    B.LT returnM
    ADD X0, X1, XZR
    B max_done

returnM:
    ADD X0, X2, XZR

max_done:
    LDUR X30, [SP, #0]
    LDUR X9,  [SP, #8]
    LDUR X10, [SP, #16]
    ADDI SP, SP, #32
    BR LR